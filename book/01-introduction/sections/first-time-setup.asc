[[_first_time]]
=== Cài đặt Git

Sau khi cài đặt xong Git, bạn hẳn sẽ muốn tuỳ biến 1 vài cài đặt riêng cho môi trường của mình.
Bạn chỉ cần thiết lập những tuỳ biến này 1 lần duy nhất.
Bạn cũng có thể chỉnh sửa những tuỳ biến này bất kỳ lúc nào.

Để thực hiện thiết lập những tuỳ biến này, chúng ta sẽ sử dụng câu lệnh `git config`.
Những giá trị này có thể được lưu ở 3 nơi khác nhau:

1. `[path]/etc/gitconfig`: lưu những giá trị áp dụng cho tất cả user, tất cả repository trên hệ thống.
  Câu lệnh `git config` với tuỳ chon `--system` sẽ đọc và ghi từ file này.
  Vì đây là file cấu hình ở mức độ hệ thống, bạn cần có quyền admin hoặc superuser để thực hiện thay đổi.
2. `~/.gitconfig` or `~/.config/git/config`: lưu những giá trị cấu hình cho cá nhân bạn.
  Câu lệnh `git config` với tuỳ chọn `--global` sẽ đọc và ghi từ file này, thiết lập sẽ được áp dụng cho tất cả repository trên hệ thống của bạn.

3. file `.git/config` ở folder repository bạn đang làm việc: chỉ áp dụng ở phạm vi repository chứa file.
  You can force Git to read from and write to this file with the `--local` option, but that is in fact the default.
  Bạn có thể ra lệnh cho git đọc và ghi từ file này bằng tuỳ chọn `--local`, tuỳ chọn này mặc định được sử dụng nên bạn không cần chỉ định.

Những giá trị ở level sau sẽ ghi đè những giá trị ở level trước, do đó `./git/config` sẽ được sử dụng (nếu có) thay cho  `[path]/etc/gitconfig`.

Ở hệ điều hành Windows, Git sử dụng file `.gitconfig` ở cho folder `$HOME` (thường là `C:\Users\$USER`).
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at
Nếu bạn sử dụng version 2.x hoặc mới hơn cho Windows, file thiết lập cấp hệ thống thường ở 
`C:\Documents and Settings\All Users\Application Data\Git\config` với Windows XP, hoặc `C:\ProgramData\Git\config` từ Windows Vista trở đi.
Những file này chỉ có thể thay đổi bằng câu lệnh `git config -f <file>` với quyền admin.

Để xem chi tiết tất cả các thiết lập hiện tại, dùng câu lệnh:
tại
[source,console]
----
$ git config --list --show-origin
----

==== Thiết lập thông tin cá nhân

Việc đầu tiên bạn cần làm sau khi cài đặt Git là thiết lập thông tin cá nhân: user name và email.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:
Việc này

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

[[_editor]]
==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.

If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged.

In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

==== Your default branch name

By default Git will create a branch called _master_ when you create a new repository with `git init`.
From Git version 2.28 onwards, you can set a different name for the initial branch.

To set _main_ as the default branch name do:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Checking Your Settings

If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`[path]/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Since Git might read the same configuration variable value from more than one file, it's possible that you have an unexpected value for one of these values and you don't know why.
In cases like that, you can query Git as to the _origin_ for that value, and it will tell you which configuration file had the final say in setting that value:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
