=== Giới thiệu về Version Control

(((version control)))
`version control` là gì, tại sao bạn cần chúng?
Version control là 1 phần mềm lưu lại những sự thay đổi của 1 hoặc 1 nhóm file theo thời gian, mà nhờ đó bạn có thể lấy được thông tin thay đổi tại 1 thời điểm bất kỳ (1 version bất kỳ) trong quá khứ. 
Trong cuốn sách này, chúng ta sẽ lấy ví dụ bằng việc quản lý version của các file source code, trong thực tế bạn có thể lưu thay đổi (version) của hầu hết các file mà computer hỗ trợ.
sẽ
Nếu bạn là 1 nhà thiết kế đồ hoạ hoặc thiết kế web, bạn có thể sẽ dùng VCS (công cụ quản lý version - version control system) để lưu giữ tất cả các thay đổi liên quan đến image (hình ảnh) hoặc layout (bố cục trang web).

Nhơ vậy, bạn có thể dễ dàng so sánh sự thay đổi của các phiên bản, nắm được ai là người chỉnh sửa, chỉnh sửa nào phát sinh ra vấn đề, v.v.
Hay như bạn có thể dùng VCS để lấy lại file chẳng may xoá nhầm.
Đặc biệt, bạn sẽ đạt được tất cả những lợi ích trên chỉ với 1 chút công sức, cũng như tài nguyên máy tính.

==== Hệ thống quản lý version ở phạm vi local (Local Version Control Systems)

(((version control,local)))
Có nhiều cách để quản lý version của file khác nhau, ví dụ như nhiều người sẽ dùng cách copy file sang 1 folder khác (hoặc gắn time-stamped vào tên của folder).
Cách làm này rất phổ biến và đơn giản, nhưng cũng rất dễ bị mắc lỗi 
Ví dụ như bạn có thể nhầm lần giữa các folder, xoá nhầm file hoặc copy không đúng file mà bạn mong muốn.

Để giải quyết vấn đề này, các lập trình viên từ lâu đã phát triển những phần mềm VCS, lưu giữ tất cả các thay đổi của file vào 1 database nho nhỏ chạy ở máy tính local.

.Local version control
image::images/local.png[Local version control diagram]

1 trong những hệ thống VCS phổ biến nhất, vẫn được sử dụng rất nhiều hiện này có tên là RCS
https://www.gnu.org/software/rcs/[RCS] hoạt động bằng cách lưu giữ những bộ patch (những thay đổi giữa các file) bằng định dạng đặc biệt trên ổ đĩa; phần mềm có thể tái tạo lại nội dung file ở 1 thời điểm bất kỳ bằng kết hợp tất cả các patch này.

==== Hệ thống quản lý version tập trung (Centralized Version Control Systems)

(((version control,centralized)))
Vấn đề tiếp theo nhiều người gặp phải là khi có nhiều nhà phát triển (developer) cùng làm việc trên 1 hệ thống. 
`Centralized Version Control Systems (CVCs)` sinh ra để giải quyết vấn đề này 
Những hệ thống CVCs này (ví dụ như phần mềm CVS, Subversion, Perforce) có 1 server chung chứa tất cả version của file, người sử dụng sẽ tải những file này từ server tập trung này. (((CVS)))(((Subversion)))(((Perforce)))
Hệ thống này từng được coi là tiêu chuẩn trong suốt nhiều năm.

.Centralized version control
image::images/centralized.png[Centralized version control diagram]

Phương pháp này có rất nhiều ưu điểm, đặc biệt so với local VCS.
Chẳng hạn như, bất kỳ ai cũng có thể biết được những người khác trong dự án đang thao tác những gì.
Với CVCs, nhà quản trị (admin) có thể quyết định người dùng nào được phép thao tác đến đâu, mà không cần phải thao tác cài đặt trên máy tính cá nhân.

Tuy nhiên, phương pháp này cũng có những nhược điểm nhất định.
Dễ thấy nhất là ứng dụng sẽ hoàn toàn mất khả năng sử dụng nếu server ở trạng thái không phản hồi.
Nếu server bị sập (down) trong 1 giờ, không ai có thể thao tác, hoặc lưu những thay đổi ở phiên làm việc của họ trong thời gian này.
Nếu ổ đĩa của cơ sở dữ liệu tập trung bị hỏng, và không có bản sao lưu dự phòng nào, chúng ta sẽ mất tất cả toàn bộ lịch sử của project (trừ những bản snapshot còn lại trên máy tính của từng cá nhân tham gia dự án).
Kể cả hệ thống VCSs nội bộ (Local CVCSs) cũng như vậy -- nếu bạn lưu toàn bộ lịch sử của project tại 1 chỗ, bạn sẽ có nguy cơ bị mất tất cả.

==== Hệ thống quản lý version control phân tán (Distributed Version Control Systems)

(((version control,distributed)))
Quản lý version control phân tán (DVCSs) sinh ra để giải quyết những vấn đề ở trên.
Dùng những phần mềm DVCS (như là Git, Mercurial, Bazaar hay Darcs), người dùng không chỉ lấy phiên bản mới nhất của file; mà thay vào đó, họ sẽ sao chép toàn bộ repository, bao gồm toàn bộ lịch sử của nó.
Vì vậy cho dù nếu server bị hỏng, bất cứ người dùng nào cũng có thể phục hồi lại dữ liệu của repository từ bản backup trên máy tính local.
Tất cả bản sao chép trên máy tính local đều là bản sao lưu hoàn chỉnh của tất cả dữ liệu.

.Distributed version control
image::images/distributed.png[Distributed version control diagram]

Hơn nữa, nhiều hệ thống có thể xử lý tốt khi làm việc trên nhiều repository cùng lúc, vì vậy bạn có thể cùng lúc làm việc trên 1 project với nhiều group khác nhau, với những cách khác nhau.
Điều này cho phép bạn dễ dàng thiết lập nhiều kiểu workflows mà không thể với hệ thống tập trung, ví dụ như mô hình phân lớp.